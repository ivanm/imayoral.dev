{"version":3,"sources":["Intro.tsx","Projects.tsx","Contact.tsx","LeftMenuLink.tsx","LeftMenu.tsx","ColorModeSwitcher.tsx","TopButtons.tsx","theme.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","locales/en.ts","locales/es.ts","i18n.ts","index.tsx"],"names":["Intro","props","useTranslation","fontSize","mb","Trans","i18nKey","isExternal","href","Projects","Contact","LeftMenuLink","to","children","location","colorMode","useColorMode","isCurrent","pathname","align","mr","as","ReachLink","color","undefined","ml","LeftMenu","base","sm","pl","direction","pt","bg","borderRight","borderColor","ColorModeSwitcher","toggleColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","marginLeft","onClick","icon","TopButtons","i18n","useLocalStorage","language","setLanguage","changeLanguage","lng","Button","rightIcon","minWidth","justifySelf","DARK_LINK_COLOR","LIGHT_LINK_COLOR","customTheme","config","initialColorMode","useSystemColorMode","colors","gray","styles","global","body","background","mode","components","Link","baseStyle","fontWeight","_focus","boxShadow","breakpoints","createBreakpoints","md","lg","xl","theme","extendTheme","App","fallback","minH","templateColumns","width","mt","justifyContent","pr","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","en","menu","about","projects","contact","intro","greeting","text1","text2","text3","text4","coinlog","nftExplorer","nftAutoTool","es","localStorage","getItem","JSON","parse","use","initReactI18next","init","resources","translation","fallbackLng","interpolation","escapeValue","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54ed3548.chunk.js","sourcesContent":["import { Fragment } from \"react\";\nimport { Text, Link } from \"@chakra-ui/react\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { useTranslation, Trans } from \"react-i18next\";\n\nconst Intro = (props: RouteComponentProps) => {\n  useTranslation();\n  return (\n    <Fragment>\n      <Text fontSize={18} mb={4}>\n        <Trans i18nKey=\"intro.greeting\">\n          Howdy!\n        </Trans>\n      </Text>\n      <Text mb={4}>\n        <Trans i18nKey=\"intro.text1\">\n          My name is <b>Iván Mayoral</b>, I am a<b>Senior Software Engineer</b>\n          with over <b>10</b> years of professional experience in Computer\n          Science.\n        </Trans>\n      </Text>\n      <Text mb={4}>\n        <Trans i18nKey=\"intro.text2\">\n          I live in <b>Mexico City</b> and have been working remotely for about\n          9 years as a contractor for US Tech Companies:\n          <Link isExternal href=\"https://gumgum.com/\">\n            GumGum\n          </Link>\n          and\n          <Link isExternal href=\"https://hellopearl.com\">\n            Pearl\n          </Link>\n        </Trans>\n      </Text>\n      <Text mb={4}>\n        <Trans i18nKey=\"intro.text3\">\n          I am passionate about Free Software, Linux, UI/UX, Accesibility, and\n          React.\n        </Trans>\n      </Text>\n      <Text mb={4}>\n        <Trans i18nKey=\"intro.text4\">\n          My main programming languages are JavaScript (TypeScript ❤️), PHP7,\n          Ruby and Solidity, however I have worked with C, C++ and Java in my\n          first early jobs.\n        </Trans>\n      </Text>\n    </Fragment>\n  );\n};\nexport default Intro;\n","import { Fragment } from \"react\";\nimport { Text, UnorderedList, ListItem, Link } from \"@chakra-ui/react\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { useTranslation, Trans } from \"react-i18next\";\n\nconst Projects = (props: RouteComponentProps) => {\n  useTranslation();\n  return (\n    <Fragment>\n      <Text mb={4}>\n        <Trans i18nKey=\"projects.text1\">\n          This are some of the\n          <Link isExternal href=\"https://github.com/ivanm\">\n            Open Source\n          </Link>\n          projects that I'm currently working on my free time:\n        </Trans>\n      </Text>\n      <UnorderedList>\n        <ListItem>\n          <Trans i18nKey=\"projects.coinlog\">\n            <Link isExternal href=\"http://coinlog.vaan.dev\">\n              coinlog:\n            </Link>\n            A configurable cryptocurrency price tracker.\n          </Trans>\n        </ListItem>\n        <ListItem>\n          <Trans i18nKey=\"projects.nftExplorer\">\n            <Link isExternal href=\"http://nft-explorer.vaan.dev\">\n              nft-explorer:\n            </Link>\n            A visualization tool for NFT Collections. An alternative to OpenSea.\n          </Trans>\n        </ListItem>\n        <ListItem>\n          <Trans i18nKey=\"projects.nftAutoTool\">\n            <Link isExternal href=\"https://github.com/ivanm/nft-autotool\">\n              nft-autotool:\n            </Link>\n            NFT Genereator script using layers with different rarities.\n          </Trans>\n        </ListItem>\n      </UnorderedList>\n    </Fragment>\n  );\n};\nexport default Projects;\n","import { Fragment } from \"react\";\nimport { Text, Link, UnorderedList, ListItem } from \"@chakra-ui/react\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { useTranslation, Trans } from \"react-i18next\";\n\nconst Contact = (props: RouteComponentProps) => {\n  useTranslation();\n  return (\n    <Fragment>\n      <Text mb={4}>\n        <Trans i18nKey=\"contact.text1\">You can find me on:</Trans>\n      </Text>\n      <UnorderedList>\n        <ListItem>\n          <Link href=\"https://www.linkedin.com/in/imayoral/\">LinkedIn</Link>\n        </ListItem>\n        <ListItem>\n          <Link href=\"https://github.com/ivanm\" isExternal>\n            Github\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link href=\"https://twitter.com/vaan\" isExternal>\n            Twitter\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link href=\"https://medium.com/@ivanmgg\" isExternal>\n            Medium\n          </Link>\n        </ListItem>\n      </UnorderedList>\n    </Fragment>\n  );\n};\nexport default Contact;\n","import { Flex, Link, useColorMode } from \"@chakra-ui/react\";\nimport { Link as ReachLink } from \"@reach/router\";\n\ninterface LeftMenuLinkProps {\n  to: string;\n  children: React.ReactNode;\n  location: Location;\n}\n\nconst LeftMenuLink = ({ to, children, location }: LeftMenuLinkProps) => {\n  const { colorMode } = useColorMode();\n  const isCurrent = location.pathname === to;\n  return (\n    <Flex>\n      {isCurrent ? (\n        <Flex align=\"center\" fontSize=\"10\" mb={2} mr={2}>\n          ᐅ\n        </Flex>\n      ) : null}\n      <Link\n        as={ReachLink}\n        to={to}\n        color={\n          isCurrent ? (colorMode === \"dark\" ? \"white\" : \"black\") : undefined\n        }\n        mb={2}\n        ml={isCurrent ? 0 : 4}\n      >\n        {children}\n      </Link>\n    </Flex>\n  );\n};\nexport default LeftMenuLink;\n","import { Flex, useColorMode } from \"@chakra-ui/react\";\nimport { Location } from \"@reach/router\";\nimport { useTranslation, Trans } from \"react-i18next\";\n\nimport LeftMenuLink from \"./LeftMenuLink\";\n\nconst LeftMenu = () => {\n  const { colorMode } = useColorMode();\n  useTranslation();\n  return (\n    <Location>\n      {({ location }) => (\n        <Flex\n          fontSize={{ base: 10, sm: 15 }}\n          pl={{ base: 3, sm: 8 }}\n          direction=\"column\"\n          pt=\"105px\"\n          bg={colorMode === \"dark\" ? \"black\" : \"gray.50\"}\n          borderRight=\"1px\"\n          borderColor={colorMode === \"dark\" ? \"gray.800\" : \"gray.100\"}\n        >\n          <LeftMenuLink to=\"/\" location={location}>\n            <Trans i18nKey=\"menu.about\">About</Trans>\n          </LeftMenuLink>\n          <LeftMenuLink to=\"/projects\" location={location}>\n            <Trans i18nKey=\"menu.projects\">Projects</Trans>\n          </LeftMenuLink>\n          <LeftMenuLink to=\"/contact\" location={location}>\n            <Trans i18nKey=\"menu.contact\">Contact</Trans>\n          </LeftMenuLink>\n        </Flex>\n      )}\n    </Location>\n  );\n};\n\nexport default LeftMenu;\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps\n} from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import { Fragment } from \"react\";\nimport { Button, Menu, MenuButton, MenuList, MenuItem } from \"@chakra-ui/react\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocalStorage } from \"usehooks-ts\";\n\nconst TopButtons = () => {\n  const { i18n } = useTranslation();\n  const [language, setLanguage] = useLocalStorage(\"language\", \"en\");\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n    setLanguage(lng);\n  };\n\n  return (\n    <Fragment>\n      <Menu>\n        <MenuButton\n          size=\"sm\"\n          variant=\"ghost\"\n          as={Button}\n          fontSize={{ base: 12, sm: 15 }}\n          rightIcon={<ChevronDownIcon />}\n        >\n          {language === \"en\" ? \"English\" : \"Español\"}\n        </MenuButton>\n        <MenuList fontSize={{ base: 12, sm: 15 }} minWidth=\"115px\">\n          <MenuItem onClick={() => changeLanguage(\"en\")}>\n            {language === \"en\" ? <b>English</b> : \"English\"}\n          </MenuItem>\n          <MenuItem onClick={() => changeLanguage(\"es\")}>\n            {language === \"es\" ? <b>Español</b> : \"Español\"}\n          </MenuItem>\n        </MenuList>\n      </Menu>\n      <ColorModeSwitcher\n        fontSize={{ base: 12, sm: 15 }}\n        size=\"sm\"\n        justifySelf=\"flex-end\"\n      />\n    </Fragment>\n  );\n};\nexport default TopButtons;\n","import {\n  extendTheme,\n  ThemeConfig,\n  Colors,\n  ThemeComponents\n} from \"@chakra-ui/react\";\nimport {\n  mode,\n  Styles,\n  Breakpoints,\n  createBreakpoints\n} from \"@chakra-ui/theme-tools\";\nimport type { Dict } from \"@chakra-ui/utils\";\n\n\nconst DARK_LINK_COLOR = \"#489d4f\";\nconst LIGHT_LINK_COLOR = \"#267a24\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false\n};\n\nconst styles: Styles = {\n  global: props => ({\n    body: {\n      background: mode(\"gray.50\", \"gray.900\")(props),\n      color: mode(\"gray.900\", \"gray.50\")(props)\n    }\n  })\n};\n\nconst colors: Colors = {\n  gray: {\n    50: \"#f2f2f2\",\n    100: \"#d9d9d9\",\n    200: \"#bfbfbf\",\n    300: \"#a6a6a6\",\n    400: \"#8c8c8c\",\n    500: \"#737373\",\n    600: \"#595959\",\n    700: \"#404040\",\n    800: \"#262626\",\n    900: \"#0d0d0d\"\n  }\n};\nconst components: ThemeComponents = {\n  Link: {\n    baseStyle: ({ colorMode }) => ({\n      color: colorMode === \"dark\" ? DARK_LINK_COLOR : LIGHT_LINK_COLOR,\n      fontWeight: \"bold\",\n      _focus: {\n        boxShadow:\n          colorMode === \"dark\"\n            ? `${DARK_LINK_COLOR} 0px 0px 0px 3px`\n            : `${LIGHT_LINK_COLOR} 0px 0px 0px 3px`\n      }\n    })\n  },\n  Button: {\n    baseStyle: ({ colorMode }) => ({\n      _focus: {\n        boxShadow:\n          colorMode === \"dark\"\n            ? `${DARK_LINK_COLOR} 0px 0px 0px 3px`\n            : `${LIGHT_LINK_COLOR} 0px 0px 0px 3px`\n      }\n    })\n  }\n};\n\nconst breakpoints: Breakpoints<Dict> = createBreakpoints({\n  sm: \"650px\",\n  md: \"700px\",\n  lg: \"950px\",\n  xl: \"1000px\",\n});\n\nconst customTheme = {\n  config,\n  colors,\n  styles,\n  components,\n  breakpoints\n};\n\nconst theme = extendTheme(customTheme);\nexport default theme;\n","import { Suspense } from \"react\";\nimport { ChakraProvider, Box, Grid, Flex } from \"@chakra-ui/react\";\nimport { Router } from \"@reach/router\";\nimport Intro from \"./Intro\";\nimport Projects from \"./Projects\";\nimport Contact from \"./Contact\";\nimport LeftMenu from \"./LeftMenu\";\nimport TopButtons from \"./TopButtons\";\nimport theme from \"./theme\";\n\nexport const App = () => (\n  <Suspense fallback=\"loading\">\n    <ChakraProvider theme={theme}>\n      <Box fontSize=\"md\">\n        <Grid\n          minH=\"100vh\"\n          templateColumns={{ base: \"90px 1fr\", sm: \"150px 1fr\" }}\n        >\n          <LeftMenu />\n          <Flex width=\"100%\" direction=\"column\">\n            <Flex mt={5} direction=\"row\" justifyContent=\"end\" mr={4}>\n              <TopButtons />\n            </Flex>\n            <Flex pl={10} pr={10} direction=\"column\" mt={12} align=\"center\">\n              <Flex\n                fontSize={{ base: 12, sm: 15 }}\n                width={{ base: \"auto\", sm: \"400px\", lg: \"700px\" }}\n              >\n                <Router>\n                  <Intro path=\"/\" />\n                  <Projects path=\"/projects\" />\n                  <Contact path=\"/contact\" />\n                </Router>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  </Suspense>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","const en: any = {\n  menu: { about: \"About\", projects: \"Projects\", contact: \"Contact\" },\n  intro: {\n    greeting: \"Howdy!\",\n    text1:\n      \"My name is <1>Iván Mayoral</1>, I am a <3>Senior Software Engineer</3> with over <5>10</5> years of professional experience in Computer Science.\",\n    text2:\n      \"I live in <1>Mexico City</1> 🇲🇽 where I have been working remotely for about 9 years as a contractor for US Tech Companies: <3>GumGum</3> and <5>Pearl</5>\",\n    text3:\n      \"I am passionate about Free Software, Linux, UI/UX, Accesibility, and React.\",\n    text4:\n      \"My main programming languages are JavaScript (TypeScript ❤️), PHP7, Ruby and Solidity, however I have worked with C, C++ and Java in my first early jobs.\"\n  },\n  projects: {\n    text1:\n      \"This are some of the <1>Open Source</1> projects that I'm currently working on my free time:\",\n    coinlog: \"<0>coinlog:</0> A configurable cryptocurrency price tracker.\",\n    nftExplorer:\n      \"<0>nft-explorer:</0> A visualization tool for NFT Collections. An alternative to OpenSea.\",\n    nftAutoTool:\n      \"<0>nft-autotool:</0> NFT Generator script using layers with different rarities.\"\n  },\n  contact: {\n    text1: \"You can find me on:\"\n  }\n};\nexport default en;\n","const es: any = {\n  menu: { about: \"Acerca de\", projects: \"Proyectos\", contact: \"Contacto\" },\n  intro: {\n    greeting: \"¡Hola!\",\n    text1:\n      \"Mi nombre es <1>Iván Mayoral</1>, soy <3>Senior Software Engineer</3> con más de <5>10</5> años de carrera profesional en Ciencias de la Computación.\",\n    text2:\n      \"Vivo en <1>Ciudad de México</1> 🇲🇽 desde donde he estado trabajando de forma remota los últimos 9 años como contractor para empresas tecnológicas de USA: <3>GumGum</3> y <5>Pearl</5>\",\n    text3:\n      \"Me apasiona el Software Libre, Linux, UI/UX, Accesibilidad y React.\",\n    text4:\n      \"Mis principales lenguajes de programación son JavaScript (TypeScript ❤️), PHP7, Ruby y Solidity, sin embargo, he programado con C, C++ y Java en mis primeros trabajos.\"\n  },\n  projects: {\n    text1:\n      \"Estos son algunos de los proyectos <1>Open Source</1> en los que he trabajado en mi tiempo libre:\",\n    coinlog: \"<0>coinlog:</0> Un tracker configurable de criptomonedas.\",\n    nftExplorer:\n      \"<0>nft-explorer:</0> Herramienta de visualización para colecciones de NFT. Alternativa a OpenSea.\",\n    nftAutoTool:\n      \"<0>nft-autotool:</0> Script generador de NFTs usando capas con diferentes rarezas.\"\n  },\n  contact: {\n    text1: \"Puedes encontrarme en:\"\n  }\n};\nexport default es;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport en from \"./locales/en\";\nimport es from \"./locales/es\";\n\nconst lng: string =\n  localStorage.getItem(\"language\") !== null\n    ? JSON.parse(`${localStorage.getItem(\"language\")}`)\n    : \"en\";\ni18n.use(initReactI18next).init({\n  resources: {\n    en: { translation: en },\n    es: { translation: es }\n  },\n  lng,\n  fallbackLng: \"en\",\n  // debug: true,\n  interpolation: {\n    escapeValue: false\n  }\n});\n\nexport default i18n;\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}