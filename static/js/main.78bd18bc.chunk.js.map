{"version":3,"sources":["ColorModeSwitcher.tsx","Intro.tsx","theme.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","Intro","maxWidth","direction","mb","isExternal","href","DARK_LINK_COLOR","LIGHT_LINK_COLOR","customTheme","config","initialColorMode","useSystemColorMode","colors","gray","styles","global","body","background","mode","components","Link","baseStyle","colorMode","fontWeight","_focus","boxShadow","Button","theme","extendTheme","App","minH","pr","pl","templateRows","mt","justifySelf","justify","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78bd18bc.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Text, Flex, UnorderedList, ListItem, Link } from \"@chakra-ui/react\";\n\nconst Intro = () => (\n  <Flex maxWidth=\"700px\" direction=\"column\">\n    <Text mb={4}>Howdy!</Text>\n    <Text mb={4}>\n      My name is <b>Iv√°n Mayoral</b>, I am a <b>Senior Software Engineer</b>{\" \"}\n      with over <b>10</b> years of professional experience in Computer Science.\n    </Text>\n    <Text mb={4}>\n      I live in <b>Mexico City</b> üá≤üáΩ and have been working remotely for about 9\n      years as a contractor for US Tech Companies:{\" \"}\n      <Link isExternal href=\"https://gumgum.com/\">GumGum</Link> and{\" \"}\n      <b>\n        <Link isExternal href=\"https://hellopearl.com\">Pearl</Link>\n      </b>\n    </Text>\n    <Text mb={4}>\n      I am passionate about Free Software, Linux, UI Development, Accesibility,\n      and React.\n    </Text>\n    <Text mb={4}>\n      My main programming languages are JavaScript (TypeScript ‚ù§Ô∏è), PHP7,\n      Ruby and Solidity, however I have worked with C, C++ and Java in my first\n      early jobs.\n    </Text>\n    <Text mb={4}>\n      This are some of the{\" \"}\n      <Link isExternal href=\"https://github.com/ivanm\">Open Source</Link> projects that I'm\n      currently working on my free time:\n    </Text>\n    <UnorderedList>\n      <ListItem>\n        <Link isExternal href=\"http://coinlog.vaan.dev\">coinlog:</Link>A configurable\n        cryptocurrency price tracker.\n      </ListItem>\n      <ListItem>\n        <Link isExternal href=\"http://nft-explorer.vaan.dev\">nft-explorer:</Link> An\n        visualizarion tool for NFT Collections. An alternative to OpenSea\n      </ListItem>\n      <ListItem>\n        <Link isExternal href=\"https://github.com/ivanm/nft-autotool\">nft-autotool:</Link>{\" \"}\n        NFT Genereator script using layers with different rarities.\n      </ListItem>\n    </UnorderedList>\n  </Flex>\n);\nexport default Intro;\n","import {\n  extendTheme,\n  ThemeConfig,\n  Colors,\n  ThemeComponents\n} from \"@chakra-ui/react\";\nimport { mode, Styles } from \"@chakra-ui/theme-tools\";\n\nconst DARK_LINK_COLOR = \"#489d4f\";\nconst LIGHT_LINK_COLOR = \"#267a24\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false\n};\n\nconst styles: Styles = {\n  global: props => ({\n    body: {\n      background: mode(\"gray.50\", \"gray.900\")(props),\n      color: mode(\"gray.900\", \"gray.50\")(props)\n    }\n  })\n};\n\nconst colors: Colors = {\n  gray: {\n    50: \"#f2f2f2\",\n    100: \"#d9d9d9\",\n    200: \"#bfbfbf\",\n    300: \"#a6a6a6\",\n    400: \"#8c8c8c\",\n    500: \"#737373\",\n    600: \"#595959\",\n    700: \"#404040\",\n    800: \"#262626\",\n    900: \"#0d0d0d\"\n  }\n};\nconst components: ThemeComponents = {\n  Link: {\n    baseStyle: ({ colorMode }) => ({\n      color: colorMode === \"dark\" ? DARK_LINK_COLOR : LIGHT_LINK_COLOR,\n      fontWeight: \"bold\",\n      _focus: {\n        boxShadow:\n          colorMode === \"dark\"\n            ? `${DARK_LINK_COLOR} 0px 0px 0px 3px`\n            : `${LIGHT_LINK_COLOR} 0px 0px 0px 3px`\n      }\n    })\n  },\n  Button: {\n    baseStyle: ({ colorMode }) => ({\n      _focus: {\n        boxShadow:\n          colorMode === \"dark\"\n            ? `${DARK_LINK_COLOR} 0px 0px 0px 3px`\n            : `${LIGHT_LINK_COLOR} 0px 0px 0px 3px`\n      }\n    })\n  }\n};\n\nconst customTheme = {\n  config,\n  colors,\n  styles,\n  components\n};\n\nconst theme = extendTheme(customTheme);\nexport default theme;\n","import * as React from \"react\";\nimport { ChakraProvider, Box, Grid, Flex } from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport Intro from \"./Intro\";\nimport theme from \"./theme\";\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Box fontSize=\"md\">\n      <Grid minH=\"100vh\" pr={10} pl={10} templateRows=\"80px 1fr\">\n        <ColorModeSwitcher mt={2}justifySelf=\"flex-end\" />\n        <Flex justify=\"center\" mt={10} width=\"100%\">\n          <Intro />\n        </Flex>\n      </Grid>\n    </Box>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}